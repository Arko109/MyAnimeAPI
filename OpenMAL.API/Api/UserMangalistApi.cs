/* 
 * MyAnimeList API (beta ver.)
 *
 * MyAnimeList.net is the property of MyAnimeList, LLC. ©2019 All Rights Reserved.  ## Versioning  There are multiple versions of the API. You can specify a version by including it in the request uri:  (During closed beta, version starts with '0.')  `https://api.myanimelist.net/v2`  The version is incremented if any backwards incompatible changes are introduced to the API.  Examples of backwards incompatible changes are belows:  - Removing existing endpoints. - Removing existing fields of API responses. - Changing mean of the existing fields.  On the other hand, belows are examples of backwards compatible changes:  - Adding new endpoints. - Adding new optional request parameters. - Adding new fields to existing API responses. - Changing the order of fields in existing API responses. - Changing the contents of fields that suffixed by `_formatted`.   ## Common formats  ### List / Pagination  ```json {   \"data\": [     {...},     {...},     ...   ],   \"paging\": {     \"previous\": \"https://xxx\",     \"next\": \"https://xxx\"   } } ```      ### Date / Time format  <table> <tr> <th>Format <th>Type <th>Sample <th>Description </tr>  <tr> <td>date-time <td>string <td>\"2015-03-02T06:03:11+00:00\"  <td>ISO 8601 </tr>      <tr> <td>date <td>string <td>\"2017-10-23\" or <br>\"2017-10\" or <br>\"2017\" <td> </tr>  <tr> <td>time <td>string <td>\"01:35\" <td> </tr>  </table>  ### Error format   ```json {   \"error\": \"invalid_token\"   \"message\": \"token is invalid\", } ```  ## Common parameters  ### Parameters for endpoints that return a list  | Name | Description | | - -- | - -- | | limit |  | | offset |  |  ### Choosing fields  By default, the API doesn’t return all fields.  You can choose the fields that you want returned with the `fields` parameter.  Example:  ``` fields=synopsis,my_list_status{priority,comments} ```  ### Not Safe For Work  By default, some APIs don’t return nsfw content.  You can control this behavior with the `nsfw` parameter.  | Name | Description | | - -- | - -- | | nsfw | `true` or `false` |   ## Common status codes  | Status code | Error code | Description | | - -- - | - -- - | - -- - | | 400 Bad Request | - | Invalid Parameters | | 401 Unauthorized | invalid_token | Expired access tokens, Invalid access tokens, etc. | | 403 Forbidden | - | DoS detected etc. | | 404 Not Found | - | |  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using OpenMAL.API.Client;
using OpenMAL.API.Model;

namespace OpenMAL.API.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserMangalistApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete my manga list item.
        /// </summary>
        /// <remarks>
        /// If the specified manga does not exist in user&#39;s manga list, this endpoint does nothing and returns &#x60;404 Not Found&#x60;.  So be careful when retrying. 
        /// </remarks>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mangaId"></param>
        /// <returns></returns>
        void MangaMangaIdMyListStatusDelete (int mangaId);

        /// <summary>
        /// Delete my manga list item.
        /// </summary>
        /// <remarks>
        /// If the specified manga does not exist in user&#39;s manga list, this endpoint does nothing and returns &#x60;404 Not Found&#x60;.  So be careful when retrying. 
        /// </remarks>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mangaId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MangaMangaIdMyListStatusDeleteWithHttpInfo (int mangaId);
        /// <summary>
        /// Update my manga list status
        /// </summary>
        /// <remarks>
        /// Add specified manga to my manga list.  If specified manga already exists, update its status.  This endpoint updates only values specified by the parameter. 
        /// </remarks>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mangaId"></param>
        /// <param name="status">- reading - completed - on_hold - dropped - plan_to_read  (optional)</param>
        /// <param name="isRereading"> (optional)</param>
        /// <param name="score">0-10 (optional)</param>
        /// <param name="numVolumesRead"> (optional)</param>
        /// <param name="numChaptersRead"> (optional)</param>
        /// <param name="priority">0-2  (optional)</param>
        /// <param name="numTimesReread"> (optional)</param>
        /// <param name="rereadValue">0-5  (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="comments"> (optional)</param>
        /// <returns>MangaListStatus</returns>
        MangaListStatus MangaMangaIdMyListStatusPut (int mangaId, string status = default(string), bool? isRereading = default(bool?), int? score = default(int?), int? numVolumesRead = default(int?), int? numChaptersRead = default(int?), int? priority = default(int?), int? numTimesReread = default(int?), int? rereadValue = default(int?), string tags = default(string), string comments = default(string));

        /// <summary>
        /// Update my manga list status
        /// </summary>
        /// <remarks>
        /// Add specified manga to my manga list.  If specified manga already exists, update its status.  This endpoint updates only values specified by the parameter. 
        /// </remarks>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mangaId"></param>
        /// <param name="status">- reading - completed - on_hold - dropped - plan_to_read  (optional)</param>
        /// <param name="isRereading"> (optional)</param>
        /// <param name="score">0-10 (optional)</param>
        /// <param name="numVolumesRead"> (optional)</param>
        /// <param name="numChaptersRead"> (optional)</param>
        /// <param name="priority">0-2  (optional)</param>
        /// <param name="numTimesReread"> (optional)</param>
        /// <param name="rereadValue">0-5  (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="comments"> (optional)</param>
        /// <returns>ApiResponse of MangaListStatus</returns>
        ApiResponse<MangaListStatus> MangaMangaIdMyListStatusPutWithHttpInfo (int mangaId, string status = default(string), bool? isRereading = default(bool?), int? score = default(int?), int? numVolumesRead = default(int?), int? numChaptersRead = default(int?), int? priority = default(int?), int? numTimesReread = default(int?), int? rereadValue = default(int?), string tags = default(string), string comments = default(string));
        /// <summary>
        /// Get user manga list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">User name or &#x60;@me&#x60;. </param>
        /// <param name="status">Filters returned manga list by these statuses.  To return all manga, don&#39;t specify this field.  Valid values:  - reading - completed - on_hold - dropped - plan_to_read  (optional)</param>
        /// <param name="sort">Valid values:  | Value | Order | | - -- - | - -- - | | &#x60;list_score&#x60; | Descending | | &#x60;list_updated_at&#x60; | Descending | | &#x60;manga_title&#x60; | Ascending | | &#x60;manga_start_date&#x60; | Descending | | &#x60;manga_id&#x60; (Under Development) | Ascending |  (optional)</param>
        /// <param name="limit">The maximum value is 1000.  (optional, default to 100)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>UserMangaList</returns>
        UserMangaList UsersUserIdMangalistGet (string userName, string status = default(string), string sort = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Get user manga list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">User name or &#x60;@me&#x60;. </param>
        /// <param name="status">Filters returned manga list by these statuses.  To return all manga, don&#39;t specify this field.  Valid values:  - reading - completed - on_hold - dropped - plan_to_read  (optional)</param>
        /// <param name="sort">Valid values:  | Value | Order | | - -- - | - -- - | | &#x60;list_score&#x60; | Descending | | &#x60;list_updated_at&#x60; | Descending | | &#x60;manga_title&#x60; | Ascending | | &#x60;manga_start_date&#x60; | Descending | | &#x60;manga_id&#x60; (Under Development) | Ascending |  (optional)</param>
        /// <param name="limit">The maximum value is 1000.  (optional, default to 100)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>ApiResponse of UserMangaList</returns>
        ApiResponse<UserMangaList> UsersUserIdMangalistGetWithHttpInfo (string userName, string status = default(string), string sort = default(string), int? limit = default(int?), int? offset = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserMangalistApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete my manga list item.
        /// </summary>
        /// <remarks>
        /// If the specified manga does not exist in user&#39;s manga list, this endpoint does nothing and returns &#x60;404 Not Found&#x60;.  So be careful when retrying. 
        /// </remarks>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mangaId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MangaMangaIdMyListStatusDeleteAsync (int mangaId);

        /// <summary>
        /// Delete my manga list item.
        /// </summary>
        /// <remarks>
        /// If the specified manga does not exist in user&#39;s manga list, this endpoint does nothing and returns &#x60;404 Not Found&#x60;.  So be careful when retrying. 
        /// </remarks>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mangaId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MangaMangaIdMyListStatusDeleteAsyncWithHttpInfo (int mangaId);
        /// <summary>
        /// Update my manga list status
        /// </summary>
        /// <remarks>
        /// Add specified manga to my manga list.  If specified manga already exists, update its status.  This endpoint updates only values specified by the parameter. 
        /// </remarks>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mangaId"></param>
        /// <param name="status">- reading - completed - on_hold - dropped - plan_to_read  (optional)</param>
        /// <param name="isRereading"> (optional)</param>
        /// <param name="score">0-10 (optional)</param>
        /// <param name="numVolumesRead"> (optional)</param>
        /// <param name="numChaptersRead"> (optional)</param>
        /// <param name="priority">0-2  (optional)</param>
        /// <param name="numTimesReread"> (optional)</param>
        /// <param name="rereadValue">0-5  (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="comments"> (optional)</param>
        /// <returns>Task of MangaListStatus</returns>
        System.Threading.Tasks.Task<MangaListStatus> MangaMangaIdMyListStatusPutAsync (int mangaId, string status = default(string), bool? isRereading = default(bool?), int? score = default(int?), int? numVolumesRead = default(int?), int? numChaptersRead = default(int?), int? priority = default(int?), int? numTimesReread = default(int?), int? rereadValue = default(int?), string tags = default(string), string comments = default(string));

        /// <summary>
        /// Update my manga list status
        /// </summary>
        /// <remarks>
        /// Add specified manga to my manga list.  If specified manga already exists, update its status.  This endpoint updates only values specified by the parameter. 
        /// </remarks>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mangaId"></param>
        /// <param name="status">- reading - completed - on_hold - dropped - plan_to_read  (optional)</param>
        /// <param name="isRereading"> (optional)</param>
        /// <param name="score">0-10 (optional)</param>
        /// <param name="numVolumesRead"> (optional)</param>
        /// <param name="numChaptersRead"> (optional)</param>
        /// <param name="priority">0-2  (optional)</param>
        /// <param name="numTimesReread"> (optional)</param>
        /// <param name="rereadValue">0-5  (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="comments"> (optional)</param>
        /// <returns>Task of ApiResponse (MangaListStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<MangaListStatus>> MangaMangaIdMyListStatusPutAsyncWithHttpInfo (int mangaId, string status = default(string), bool? isRereading = default(bool?), int? score = default(int?), int? numVolumesRead = default(int?), int? numChaptersRead = default(int?), int? priority = default(int?), int? numTimesReread = default(int?), int? rereadValue = default(int?), string tags = default(string), string comments = default(string));
        /// <summary>
        /// Get user manga list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">User name or &#x60;@me&#x60;. </param>
        /// <param name="status">Filters returned manga list by these statuses.  To return all manga, don&#39;t specify this field.  Valid values:  - reading - completed - on_hold - dropped - plan_to_read  (optional)</param>
        /// <param name="sort">Valid values:  | Value | Order | | - -- - | - -- - | | &#x60;list_score&#x60; | Descending | | &#x60;list_updated_at&#x60; | Descending | | &#x60;manga_title&#x60; | Ascending | | &#x60;manga_start_date&#x60; | Descending | | &#x60;manga_id&#x60; (Under Development) | Ascending |  (optional)</param>
        /// <param name="limit">The maximum value is 1000.  (optional, default to 100)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of UserMangaList</returns>
        System.Threading.Tasks.Task<UserMangaList> UsersUserIdMangalistGetAsync (string userName, string status = default(string), string sort = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Get user manga list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">User name or &#x60;@me&#x60;. </param>
        /// <param name="status">Filters returned manga list by these statuses.  To return all manga, don&#39;t specify this field.  Valid values:  - reading - completed - on_hold - dropped - plan_to_read  (optional)</param>
        /// <param name="sort">Valid values:  | Value | Order | | - -- - | - -- - | | &#x60;list_score&#x60; | Descending | | &#x60;list_updated_at&#x60; | Descending | | &#x60;manga_title&#x60; | Ascending | | &#x60;manga_start_date&#x60; | Descending | | &#x60;manga_id&#x60; (Under Development) | Ascending |  (optional)</param>
        /// <param name="limit">The maximum value is 1000.  (optional, default to 100)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (UserMangaList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserMangaList>> UsersUserIdMangalistGetAsyncWithHttpInfo (string userName, string status = default(string), string sort = default(string), int? limit = default(int?), int? offset = default(int?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserMangalistApi : IUserMangalistApiSync, IUserMangalistApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserMangalistApi : IUserMangalistApi
    {
        private OpenMAL.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserMangalistApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserMangalistApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserMangalistApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserMangalistApi(String basePath)
        {
            this.Configuration = OpenMAL.API.Client.Configuration.MergeConfigurations(
                OpenMAL.API.Client.GlobalConfiguration.Instance,
                new OpenMAL.API.Client.Configuration { BasePath = basePath }
            );
            this.Client = new OpenMAL.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OpenMAL.API.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = OpenMAL.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserMangalistApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserMangalistApi(OpenMAL.API.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OpenMAL.API.Client.Configuration.MergeConfigurations(
                OpenMAL.API.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new OpenMAL.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OpenMAL.API.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = OpenMAL.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserMangalistApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserMangalistApi(OpenMAL.API.Client.ISynchronousClient client,OpenMAL.API.Client.IAsynchronousClient asyncClient, OpenMAL.API.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OpenMAL.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OpenMAL.API.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OpenMAL.API.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OpenMAL.API.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OpenMAL.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete my manga list item. If the specified manga does not exist in user&#39;s manga list, this endpoint does nothing and returns &#x60;404 Not Found&#x60;.  So be careful when retrying. 
        /// </summary>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mangaId"></param>
        /// <returns></returns>
        public void MangaMangaIdMyListStatusDelete (int mangaId)
        {
             MangaMangaIdMyListStatusDeleteWithHttpInfo(mangaId);
        }

        /// <summary>
        /// Delete my manga list item. If the specified manga does not exist in user&#39;s manga list, this endpoint does nothing and returns &#x60;404 Not Found&#x60;.  So be careful when retrying. 
        /// </summary>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mangaId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OpenMAL.API.Client.ApiResponse<Object> MangaMangaIdMyListStatusDeleteWithHttpInfo (int mangaId)
        {
            OpenMAL.API.Client.RequestOptions localVarRequestOptions = new OpenMAL.API.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = OpenMAL.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OpenMAL.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("manga_id", OpenMAL.API.Client.ClientUtils.ParameterToString(mangaId)); // path parameter

            // authentication (main_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/manga/{manga_id}/my_list_status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MangaMangaIdMyListStatusDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete my manga list item. If the specified manga does not exist in user&#39;s manga list, this endpoint does nothing and returns &#x60;404 Not Found&#x60;.  So be careful when retrying. 
        /// </summary>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mangaId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MangaMangaIdMyListStatusDeleteAsync (int mangaId)
        {
             await MangaMangaIdMyListStatusDeleteAsyncWithHttpInfo(mangaId);

        }

        /// <summary>
        /// Delete my manga list item. If the specified manga does not exist in user&#39;s manga list, this endpoint does nothing and returns &#x60;404 Not Found&#x60;.  So be careful when retrying. 
        /// </summary>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mangaId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OpenMAL.API.Client.ApiResponse<Object>> MangaMangaIdMyListStatusDeleteAsyncWithHttpInfo (int mangaId)
        {

            OpenMAL.API.Client.RequestOptions localVarRequestOptions = new OpenMAL.API.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("manga_id", OpenMAL.API.Client.ClientUtils.ParameterToString(mangaId)); // path parameter

            // authentication (main_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/manga/{manga_id}/my_list_status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MangaMangaIdMyListStatusDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update my manga list status Add specified manga to my manga list.  If specified manga already exists, update its status.  This endpoint updates only values specified by the parameter. 
        /// </summary>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mangaId"></param>
        /// <param name="status">- reading - completed - on_hold - dropped - plan_to_read  (optional)</param>
        /// <param name="isRereading"> (optional)</param>
        /// <param name="score">0-10 (optional)</param>
        /// <param name="numVolumesRead"> (optional)</param>
        /// <param name="numChaptersRead"> (optional)</param>
        /// <param name="priority">0-2  (optional)</param>
        /// <param name="numTimesReread"> (optional)</param>
        /// <param name="rereadValue">0-5  (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="comments"> (optional)</param>
        /// <returns>MangaListStatus</returns>
        public MangaListStatus MangaMangaIdMyListStatusPut (int mangaId, string status = default(string), bool? isRereading = default(bool?), int? score = default(int?), int? numVolumesRead = default(int?), int? numChaptersRead = default(int?), int? priority = default(int?), int? numTimesReread = default(int?), int? rereadValue = default(int?), string tags = default(string), string comments = default(string))
        {
             OpenMAL.API.Client.ApiResponse<MangaListStatus> localVarResponse = MangaMangaIdMyListStatusPutWithHttpInfo(mangaId, status, isRereading, score, numVolumesRead, numChaptersRead, priority, numTimesReread, rereadValue, tags, comments);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update my manga list status Add specified manga to my manga list.  If specified manga already exists, update its status.  This endpoint updates only values specified by the parameter. 
        /// </summary>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mangaId"></param>
        /// <param name="status">- reading - completed - on_hold - dropped - plan_to_read  (optional)</param>
        /// <param name="isRereading"> (optional)</param>
        /// <param name="score">0-10 (optional)</param>
        /// <param name="numVolumesRead"> (optional)</param>
        /// <param name="numChaptersRead"> (optional)</param>
        /// <param name="priority">0-2  (optional)</param>
        /// <param name="numTimesReread"> (optional)</param>
        /// <param name="rereadValue">0-5  (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="comments"> (optional)</param>
        /// <returns>ApiResponse of MangaListStatus</returns>
        public OpenMAL.API.Client.ApiResponse< MangaListStatus > MangaMangaIdMyListStatusPutWithHttpInfo (int mangaId, string status = default(string), bool? isRereading = default(bool?), int? score = default(int?), int? numVolumesRead = default(int?), int? numChaptersRead = default(int?), int? priority = default(int?), int? numTimesReread = default(int?), int? rereadValue = default(int?), string tags = default(string), string comments = default(string))
        {
            OpenMAL.API.Client.RequestOptions localVarRequestOptions = new OpenMAL.API.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*",
                "application/json"
            };

            var localVarContentType = OpenMAL.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OpenMAL.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("manga_id", OpenMAL.API.Client.ClientUtils.ParameterToString(mangaId)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.FormParameters.Add("status", OpenMAL.API.Client.ClientUtils.ParameterToString(status)); // form parameter
            }
            if (isRereading != null)
            {
                localVarRequestOptions.FormParameters.Add("is_rereading", OpenMAL.API.Client.ClientUtils.ParameterToString(isRereading)); // form parameter
            }
            if (score != null)
            {
                localVarRequestOptions.FormParameters.Add("score", OpenMAL.API.Client.ClientUtils.ParameterToString(score)); // form parameter
            }
            if (numVolumesRead != null)
            {
                localVarRequestOptions.FormParameters.Add("num_volumes_read", OpenMAL.API.Client.ClientUtils.ParameterToString(numVolumesRead)); // form parameter
            }
            if (numChaptersRead != null)
            {
                localVarRequestOptions.FormParameters.Add("num_chapters_read", OpenMAL.API.Client.ClientUtils.ParameterToString(numChaptersRead)); // form parameter
            }
            if (priority != null)
            {
                localVarRequestOptions.FormParameters.Add("priority", OpenMAL.API.Client.ClientUtils.ParameterToString(priority)); // form parameter
            }
            if (numTimesReread != null)
            {
                localVarRequestOptions.FormParameters.Add("num_times_reread", OpenMAL.API.Client.ClientUtils.ParameterToString(numTimesReread)); // form parameter
            }
            if (rereadValue != null)
            {
                localVarRequestOptions.FormParameters.Add("reread_value", OpenMAL.API.Client.ClientUtils.ParameterToString(rereadValue)); // form parameter
            }
            if (tags != null)
            {
                localVarRequestOptions.FormParameters.Add("tags", OpenMAL.API.Client.ClientUtils.ParameterToString(tags)); // form parameter
            }
            if (comments != null)
            {
                localVarRequestOptions.FormParameters.Add("comments", OpenMAL.API.Client.ClientUtils.ParameterToString(comments)); // form parameter
            }

            // authentication (main_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< MangaListStatus >("/manga/{manga_id}/my_list_status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MangaMangaIdMyListStatusPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update my manga list status Add specified manga to my manga list.  If specified manga already exists, update its status.  This endpoint updates only values specified by the parameter. 
        /// </summary>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mangaId"></param>
        /// <param name="status">- reading - completed - on_hold - dropped - plan_to_read  (optional)</param>
        /// <param name="isRereading"> (optional)</param>
        /// <param name="score">0-10 (optional)</param>
        /// <param name="numVolumesRead"> (optional)</param>
        /// <param name="numChaptersRead"> (optional)</param>
        /// <param name="priority">0-2  (optional)</param>
        /// <param name="numTimesReread"> (optional)</param>
        /// <param name="rereadValue">0-5  (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="comments"> (optional)</param>
        /// <returns>Task of MangaListStatus</returns>
        public async System.Threading.Tasks.Task<MangaListStatus> MangaMangaIdMyListStatusPutAsync (int mangaId, string status = default(string), bool? isRereading = default(bool?), int? score = default(int?), int? numVolumesRead = default(int?), int? numChaptersRead = default(int?), int? priority = default(int?), int? numTimesReread = default(int?), int? rereadValue = default(int?), string tags = default(string), string comments = default(string))
        {
             OpenMAL.API.Client.ApiResponse<MangaListStatus> localVarResponse = await MangaMangaIdMyListStatusPutAsyncWithHttpInfo(mangaId, status, isRereading, score, numVolumesRead, numChaptersRead, priority, numTimesReread, rereadValue, tags, comments);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update my manga list status Add specified manga to my manga list.  If specified manga already exists, update its status.  This endpoint updates only values specified by the parameter. 
        /// </summary>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mangaId"></param>
        /// <param name="status">- reading - completed - on_hold - dropped - plan_to_read  (optional)</param>
        /// <param name="isRereading"> (optional)</param>
        /// <param name="score">0-10 (optional)</param>
        /// <param name="numVolumesRead"> (optional)</param>
        /// <param name="numChaptersRead"> (optional)</param>
        /// <param name="priority">0-2  (optional)</param>
        /// <param name="numTimesReread"> (optional)</param>
        /// <param name="rereadValue">0-5  (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="comments"> (optional)</param>
        /// <returns>Task of ApiResponse (MangaListStatus)</returns>
        public async System.Threading.Tasks.Task<OpenMAL.API.Client.ApiResponse<MangaListStatus>> MangaMangaIdMyListStatusPutAsyncWithHttpInfo (int mangaId, string status = default(string), bool? isRereading = default(bool?), int? score = default(int?), int? numVolumesRead = default(int?), int? numChaptersRead = default(int?), int? priority = default(int?), int? numTimesReread = default(int?), int? rereadValue = default(int?), string tags = default(string), string comments = default(string))
        {

            OpenMAL.API.Client.RequestOptions localVarRequestOptions = new OpenMAL.API.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*",
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("manga_id", OpenMAL.API.Client.ClientUtils.ParameterToString(mangaId)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.FormParameters.Add("status", OpenMAL.API.Client.ClientUtils.ParameterToString(status)); // form parameter
            }
            if (isRereading != null)
            {
                localVarRequestOptions.FormParameters.Add("is_rereading", OpenMAL.API.Client.ClientUtils.ParameterToString(isRereading)); // form parameter
            }
            if (score != null)
            {
                localVarRequestOptions.FormParameters.Add("score", OpenMAL.API.Client.ClientUtils.ParameterToString(score)); // form parameter
            }
            if (numVolumesRead != null)
            {
                localVarRequestOptions.FormParameters.Add("num_volumes_read", OpenMAL.API.Client.ClientUtils.ParameterToString(numVolumesRead)); // form parameter
            }
            if (numChaptersRead != null)
            {
                localVarRequestOptions.FormParameters.Add("num_chapters_read", OpenMAL.API.Client.ClientUtils.ParameterToString(numChaptersRead)); // form parameter
            }
            if (priority != null)
            {
                localVarRequestOptions.FormParameters.Add("priority", OpenMAL.API.Client.ClientUtils.ParameterToString(priority)); // form parameter
            }
            if (numTimesReread != null)
            {
                localVarRequestOptions.FormParameters.Add("num_times_reread", OpenMAL.API.Client.ClientUtils.ParameterToString(numTimesReread)); // form parameter
            }
            if (rereadValue != null)
            {
                localVarRequestOptions.FormParameters.Add("reread_value", OpenMAL.API.Client.ClientUtils.ParameterToString(rereadValue)); // form parameter
            }
            if (tags != null)
            {
                localVarRequestOptions.FormParameters.Add("tags", OpenMAL.API.Client.ClientUtils.ParameterToString(tags)); // form parameter
            }
            if (comments != null)
            {
                localVarRequestOptions.FormParameters.Add("comments", OpenMAL.API.Client.ClientUtils.ParameterToString(comments)); // form parameter
            }

            // authentication (main_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<MangaListStatus>("/manga/{manga_id}/my_list_status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MangaMangaIdMyListStatusPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user manga list 
        /// </summary>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">User name or &#x60;@me&#x60;. </param>
        /// <param name="status">Filters returned manga list by these statuses.  To return all manga, don&#39;t specify this field.  Valid values:  - reading - completed - on_hold - dropped - plan_to_read  (optional)</param>
        /// <param name="sort">Valid values:  | Value | Order | | - -- - | - -- - | | &#x60;list_score&#x60; | Descending | | &#x60;list_updated_at&#x60; | Descending | | &#x60;manga_title&#x60; | Ascending | | &#x60;manga_start_date&#x60; | Descending | | &#x60;manga_id&#x60; (Under Development) | Ascending |  (optional)</param>
        /// <param name="limit">The maximum value is 1000.  (optional, default to 100)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>UserMangaList</returns>
        public UserMangaList UsersUserIdMangalistGet (string userName, string status = default(string), string sort = default(string), int? limit = default(int?), int? offset = default(int?))
        {
             OpenMAL.API.Client.ApiResponse<UserMangaList> localVarResponse = UsersUserIdMangalistGetWithHttpInfo(userName, status, sort, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user manga list 
        /// </summary>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">User name or &#x60;@me&#x60;. </param>
        /// <param name="status">Filters returned manga list by these statuses.  To return all manga, don&#39;t specify this field.  Valid values:  - reading - completed - on_hold - dropped - plan_to_read  (optional)</param>
        /// <param name="sort">Valid values:  | Value | Order | | - -- - | - -- - | | &#x60;list_score&#x60; | Descending | | &#x60;list_updated_at&#x60; | Descending | | &#x60;manga_title&#x60; | Ascending | | &#x60;manga_start_date&#x60; | Descending | | &#x60;manga_id&#x60; (Under Development) | Ascending |  (optional)</param>
        /// <param name="limit">The maximum value is 1000.  (optional, default to 100)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>ApiResponse of UserMangaList</returns>
        public OpenMAL.API.Client.ApiResponse< UserMangaList > UsersUserIdMangalistGetWithHttpInfo (string userName, string status = default(string), string sort = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new OpenMAL.API.Client.ApiException(400, "Missing required parameter 'userName' when calling UserMangalistApi->UsersUserIdMangalistGet");

            OpenMAL.API.Client.RequestOptions localVarRequestOptions = new OpenMAL.API.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*",
                "application/json"
            };

            var localVarContentType = OpenMAL.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = OpenMAL.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_name", OpenMAL.API.Client.ClientUtils.ParameterToString(userName)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenMAL.API.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenMAL.API.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenMAL.API.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenMAL.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (main_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< UserMangaList >("/users/{user_name}/mangalist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserIdMangalistGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user manga list 
        /// </summary>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">User name or &#x60;@me&#x60;. </param>
        /// <param name="status">Filters returned manga list by these statuses.  To return all manga, don&#39;t specify this field.  Valid values:  - reading - completed - on_hold - dropped - plan_to_read  (optional)</param>
        /// <param name="sort">Valid values:  | Value | Order | | - -- - | - -- - | | &#x60;list_score&#x60; | Descending | | &#x60;list_updated_at&#x60; | Descending | | &#x60;manga_title&#x60; | Ascending | | &#x60;manga_start_date&#x60; | Descending | | &#x60;manga_id&#x60; (Under Development) | Ascending |  (optional)</param>
        /// <param name="limit">The maximum value is 1000.  (optional, default to 100)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of UserMangaList</returns>
        public async System.Threading.Tasks.Task<UserMangaList> UsersUserIdMangalistGetAsync (string userName, string status = default(string), string sort = default(string), int? limit = default(int?), int? offset = default(int?))
        {
             OpenMAL.API.Client.ApiResponse<UserMangaList> localVarResponse = await UsersUserIdMangalistGetAsyncWithHttpInfo(userName, status, sort, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user manga list 
        /// </summary>
        /// <exception cref="OpenMAL.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName">User name or &#x60;@me&#x60;. </param>
        /// <param name="status">Filters returned manga list by these statuses.  To return all manga, don&#39;t specify this field.  Valid values:  - reading - completed - on_hold - dropped - plan_to_read  (optional)</param>
        /// <param name="sort">Valid values:  | Value | Order | | - -- - | - -- - | | &#x60;list_score&#x60; | Descending | | &#x60;list_updated_at&#x60; | Descending | | &#x60;manga_title&#x60; | Ascending | | &#x60;manga_start_date&#x60; | Descending | | &#x60;manga_id&#x60; (Under Development) | Ascending |  (optional)</param>
        /// <param name="limit">The maximum value is 1000.  (optional, default to 100)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (UserMangaList)</returns>
        public async System.Threading.Tasks.Task<OpenMAL.API.Client.ApiResponse<UserMangaList>> UsersUserIdMangalistGetAsyncWithHttpInfo (string userName, string status = default(string), string sort = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new OpenMAL.API.Client.ApiException(400, "Missing required parameter 'userName' when calling UserMangalistApi->UsersUserIdMangalistGet");


            OpenMAL.API.Client.RequestOptions localVarRequestOptions = new OpenMAL.API.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*",
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_name", OpenMAL.API.Client.ClientUtils.ParameterToString(userName)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenMAL.API.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenMAL.API.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenMAL.API.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(OpenMAL.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (main_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserMangaList>("/users/{user_name}/mangalist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserIdMangalistGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
